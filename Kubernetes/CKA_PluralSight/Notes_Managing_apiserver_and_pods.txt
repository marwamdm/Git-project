Digging into Kubernetes API Server
Labels, annotations and namespaces
primary workload construct-the pod

I) Using the kubernetes API
___________________________

k8s API and API server : 
single surface area over the resources in a data center
Api Server is a client/server Architecture, a RESTful API over HTTP using JSON
Api Server itself is Stateless so, serialized and persisted in the cluster store

kubernetes API objects: 
These are the persistent entities in k8s representing the state of the system
Objects are organized by: 
Kind : Pod, Service, Deployment, ...
Group: Core, Apps, Storage, ...
Version: v1, beta, alpha

Basic Manifest - Pod : 
you create a yaml file with the followings :

apiVersion: v1
kind: Pod
metadata:
  name: name-of-the-pod
spec: 
  containers: 
    - name: name-of-container
      image: nginx 

And the u user 
kubectl apply -f filename.yaml 

Let's see how to explore an API object: a pod for example, 
kubectl api-resources | more -> this will list all the api aboject available in your k8s
(it also show to wich kind and group the belong)

kubectl explain pods | more -> this will display more information about pods
kubectl explain pods.spec | more -> U can view the more info about a specific object block
kubeclt explain pods.spec.containeres | more -> as u go deep to get more information 

API Groups, Organization of resources:
--------------------------------------
we have two high leval groups : 

* Core API (Legacy group): 
Pod, Node, Namespace, PersistentVolume, PersistentVolumeClaim (the most used ones)

* Named API Groups :
apps -> Deployment etc ..
storage.k_s.io -> StorageClass
rbac.authorization.k8s.io -> Role


API Versioning : 
----------------
Api is versioned independently of the k8s version itself

versions are : 
Alpha --> experimental 
Beta --> Pre-release
Stable --> General Availability

#A list of the objects available in an API group
kubectl api-resources --api-group=apps

To create a deployment create the file deployment.yml (can have any name), and then run 
kubectl create -f deployment.yml 


II) Managing k8s with labels, annotations and Namespaces : 
__________________________________________________________

Organizing object in k8s with: 
Namespaces 
Labels
Annotations 

* Namespaces : 
The offer the ability to subdivide a cluster and its resources into a virtual cluster
Resources isolation (put some virtual boundaries inside a cluster)

Advantages of namespaces:
Namespaces are a security boundary for RBAC
Naming boundary
An Object can only belong to one namespace

When u install k8s, there are 3 namespaces created automaticaly
Default 
kube-public : used to store the shared objects in the cluster like ConfigMaps
kube-system : store system pods like api-server, 

U can create ur namespace and add object in it 
kubectl get namespaces  -> to see all the name spaces 

imperative way to create namespace
kubectl create namespace itsname

if u delete a namespace, all the resources inside are deleted as well

* Labels : 
Used to organize resources like pods, nodes and more 
Label selectors are used to select/query Objects 
Return collections of Objects that stisfy search conditions
Enables u to perform oparations on a collection of resources 

Adding and editing labels: 
kubectl label pod nginx tier=PROD app=v1  (adding)
kubectl label pod nginx tier=DEBUG app=v1 --overwrite (Editing)
kubectl label pod nginx app- (removing)

Quering using lables and selectors 

kubectl get pods --show-labels (to see all the labels)
kubectl get pods --selector  tier=PROD
kubectl get po -l 'tier in (prod,qa)'

Annotations : 
-------------
Used to add additional information about ur cluster resources
Mostly used by people or tooling to make decisions 
Saves you from having to write integrations to retrieve data from extenal data sources

The different between label and annotations is that 
annotations can not be used to query/select pods or other resources
Annotations are used for other purposes , on value can hold data up to 256KB 

Adding and editing annotations : 
kubectl annotate pod nginx-pod owner=name
kubectl annotate pod nginx-pod owner=OtherName --overwrite

III) Running and managing Pods : 
_______________________________

* Understanding Pods : 
A pod is a wrapper around a container based application
A pod can contain one or more containers (but usualy one pod holds one container)
A pod have resources 
is the smolest unit of scheduling 

To run a command in a pod u run 
kubectl exec -it podName --container containerName -- /bin/bash

to mapp a port run 
kubectl port-forward pod podName LOCALPORT:PODPORT

Pod LifeCycle :
---------------

Creation -> Running -> Termination

*Creation, two ways : Administratively or by Controller
*Running : Scheduled to a Node
*Termination: there are many reasons that can lead to a termination of a pod 
u have to keep in mide that no pod is redeployed as it is, it will be a new pod that will be created

When stopping a pod, there is a grace period timer to let the process terminate itself, (signal SIGTERM)
by default the grace periode is 30 seconds 
u can change the grace period by this command 
#> kubectl delete pod --grace-period=<seconds>

Persistency of Pods: 
As a pod can never be redeployed (it is actualy recreated), 
for persistency, u do 
Configuration is managed externally : 
Pod manifests, secrets and ConfigMaps
Passing environment variables into containers
Data persistency with external volumes

Defining Pod Health
Livenessprod
Readnessprod 

Types of Diagnostic checks for Probe
Exec ==> Process exit code
tcpSocket ==> Succesfully open a port
httpGet ==> Executes a http request and checks the return (ok if it is 200=> and <400

Configuring container probes 
* initialDelaySeconds: Number of seconds after the container has started before running container probes
* PeriodSeconds : Probe interval, default 10 seconds
* timeoutSeconds : Probe timeout, default 1 sec
* failureThreshold : number of missed checks before reporting failure, default 3
* successThreshold: number of successed checks before reporting up again, default 1
 