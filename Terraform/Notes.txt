TERRAFORM - GETTING STARTED with NED Bellavance
_______________________________________________

I) ABAOUT INFRASTRUCTURE AS CODE 
--------------------------------

Def: Provisioning infrastructure through software to achieve consistent 
and predictable environments.
-- through software
-- consistance: 

Core concepts
-------------
Defined in code | Stored in source control | Declarative or imperative
| idempotent and consistent (Tf is idempotent)| Push or pull (terraform is a push type model) |


declarative VS imperative
Imperative => instructions one after another to tell te program what to do (key word is instructions)
Declarative => The software has a an idea of how to make what u want 
               you make configurations to specifie what u need exactly (key word is configuration)

Idempotent : If u dont change ur config and u apply it again, Terraform will not make change to the infrastructure that exists


The Benefits of using IaC
-------------------------

Automated deployment
Consistent environments
Repeatable process 
reusable components
Ducumented architecture

to recap : IaC isn't scary
           Manual processes are the enemy (mistakes, forget ...)


II) DEPLOYING A TERRAFORM CONFIGURATION 
---------------------------------------

Automating infrastructure : what's the scenario ?
Automating infra relies on : Provisioning resources, planning updates, using source control, reusing templates
first : - provisoning resources 
terraform is a single executable program. 
checks the .tf files, Terraform has some plugins 
have terraform state file. 

Terraform files used is this course can be found here : 
https://github.com/ned1313/Getting-Started-Terraform.git

After writting you config, u run 
#> terraform init  => this is to download the plugins of the provider u want to use 
#> terraform plan  --output file_name.tfplan => Terraform will show u what it is planning to do 
if u are happy of what terraform is going to set up, u run 
#> terraform apply

III) UPDATING THE CONFIGURATION WITH MORE RESOURCES
---------------------------------------------------
second : - Planning updates

Terraform state is in JSON format (never edit this file yourself)
contains resources mappings and metadata
Locking (a way for terraform to signal that the state file is in a period of flux, and nobody else should be trying to make changes to the infra
Location : 
  - Local (default) (good for dev and studies)
  - Remote: AWS, Azure, NFS, Terraform Cloud (suits in production)
Workspaces (each workspaces have it's own file)

First rule of Terraform : Make all changes in Terraform
(Once u've deployed a configuration, if u want to continue managing that config with terrafom, then don't make changes manually)

Terraform planning : 
Inspect state 
dependency graph
Additions, updates , and deletions
Parallel execution 
Save the plan output

We are going to add a VPC to our previous config
Adding a VPC will resultat :
resource "aws_vpc" "vpc" {}
resource "aws_internet_gateway" "igw"{}
resource "aws_subnet" "subnet1" {}
resource "aws_route_table" "routea" {}
resource "aws_route_table_association" "routea-subnet1" {}


IV) CONFIGURING RESOURCES AFTER CREATION 
-----------------------------------------

Country grammar with Terraform 
Get started with provisioners: 

the terraform grammar
    Terraform Syntax :
    HashiCorp configuration language
    uses configuration syntax and expressions
    supports conditionals, functions and templates

- Blocks : 
#the basic format of a block is 
block_type label_one label_two {
  key value pairs, 
  embedded_block {
    key value pairs 
  }
}

-Object types :
befor Terraform 0.12, there use to be juste one type of object "string"
since version 0.12 we've got more type 
number (int, and floats)
bool
list = [ "first-element-at-index-0" "second-element"]
map = {name = "my_name", age = 30, likes_food = true}

-References :
#keyword reference :
var.something
aws_instance.its_label.property
local.name_of_value.something
module.name_of_the_resource.locations
#Interpolation: 
resource_name = "name-${var.resource_type}"

when u want to get a #string, number and bool
just write it's name : local.instance_count 
when u manipulating lists and maps 
local.instance_list[index]
local.instance_map["name"]

Terraform provisioners :
Last resort => use another software like ansible, or chef
Local or remote
Creation or destruction
Multple provisioners on the same resource

some provisioner : 
file => to copy file (and directories) to the instanse
local-exec => script that will run localy
remote-exec => script on a remote machine 

V) ADDING A NEW PROVIDER TO UR CONFIGURATION
--------------------------------------------

Exploting functinos and the CLI
Set multiple cloud providers

Most useful function are built-in to Terraform 
but u can create ur own function like 
fun_name(arg1,arge2,arg3,...)
Test in terraform console
several broad categories

Common Function Categories 
* Numeric 
exemple: min(3,4,94,2,42,34)

* String
exemple: lower(TEST)

* Collection (list and maps)
exemple: merge(map1,map2)

*Filesystem 
exemple: file(path)

*Ip network
exemple: cidrsubnet()

*Date and time
timestamp()

Resource arguments:
-------------------

|depends_on | count | for_each | provider |

depends_on : Defines dependences between resources that are not obvious to Terraform (which is the cas in most of the times)
count : a way to loop through defined number 
for_each : a way to loop through a map or a list
provider : U can define more than one provider to deploy your config through multiple cloud providers
